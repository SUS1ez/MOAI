function Scroll(list)
	--local list = script.Parent
	local uigrid = list:WaitForChild("UIListLayout")

	uigrid.Changed:Connect(function(prop)
		if prop ~= "AbsoluteContentSize" then return end
		list.CanvasSize = UDim2.new(0,0,0,uigrid.AbsoluteContentSize.Y)


	end)
	list.CanvasSize = UDim2.new(0,0,0,uigrid.AbsoluteContentSize.Y)
end
local UserInputService = game:GetService("UserInputService")
local Input = {}

local binds = {}

function Input.BindKeyPresses(name,callback, ...)
	local keys = table.pack(...)
	keys.n = nil
	binds[name]	= UserInputService.InputBegan:Connect(function(input)
		if input.KeyCode and input.KeyCode == keys[#keys] then

			for i,key in pairs(keys) do
				if not UserInputService:IsKeyDown(key) then
					return
				end
			end
			callback()
		end


	end)

end
local plrs = game:GetService("Players")
local localPlr = plrs.LocalPlayer
local main,frame,close,sample,uilistlayout = Instance.new"ScreenGui",Instance.new"ScrollingFrame",Instance.new"TextButton",Instance.new"TextButton",Instance.new"UIListLayout"


Input.BindKeyPresses("BindGUI",function()
	main.Enabled = not main.Enabled
end,Enum.KeyCode.LeftAlt,Enum.KeyCode.V)
Input.BindKeyPresses("BindAnchor",function()
	localPlr.Character.HumanoidRootPart.Anchored = not localPlr.Character.HumanoidRootPart.Anchored
end,Enum.KeyCode.LeftAlt,Enum.KeyCode.B)


frame.Size = UDim2.new(0.22, 0,0.604, 0);frame.Position = UDim2.new(0.637, 0,0.194, 0);frame.Parent = main
uilistlayout.Parent = frame
Scroll(frame)
close.Size = UDim2.new(0.077, 0,0.081, 0);close.Position = UDim2.new(0.552, 0,0.158, 0)
close.Parent = main
sample.Size = UDim2.new(0.96, 0,0, 50)
local connection:RBXScriptConnection
local currentUser
local hb = game:GetService("RunService")
function stop(name)
	if connection == nil or currentUser == nil then return end
	connection:Disconnect()
end
function start(name)
	if not plrs[name] then return end
	local plr:Player = plrs[name]
	currentUser = name
	--print(name)
	connection = hb.RenderStepped:Connect(function()
		if plr.Character and plr.Character.Head and localPlr.Character and localPlr.Character.HumanoidRootPart then
			local head:Part = plr.Character.HumanoidRootPart
			local CharacterPivot = head:GetPivot()
			local root:Part = localPlr.Character.HumanoidRootPart
			--root.CFrame = CFrame.new(-head.CFrame.LookVector*5)
			root:PivotTo(CharacterPivot * CFrame.new(0, 0, 5))
		
		end
	end)
	
end
function addButton(plr:Player)
	if plr == localPlr then return end
	local sample_ = sample:Clone()
	sample_.Name = plr.Name
	sample_.Text = plr.Name
	sample_.MouseButton1Click:Connect(function()
		stop(currentUser)
		start(plr.Name)
	end)
	sample_.Parent = frame
end
plrs.PlayerAdded:Connect(addButton)
plrs.PlayerRemoving:Connect(function(plr)
	stop(plr.Name)
	pcall(function()
		frame[plr.Name]:Destroy()
	end)
end)
for _,v in plrs:GetPlayers() do
	addButton(v)
end
close.MouseButton1Click:Connect(function()
	stop(currentUser)
end)



main.Parent = game.CoreGui

